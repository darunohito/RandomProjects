<?php

namespace Jengascoin\keytest;
require('blake3_optimized.php');
use BLAKE3;

ini_set("memory_limit", "2G");

$base = trim($argv[1]);
$test_hash = trim($argv[2]);

new keytest($base, $test_hash);

class keytest
{
	private $base;
	private $test_hash;
	private $test_hash_hex;
	private $b3;
	private $blakehash;
	
	public function __construct($base, $test_hash)
	{
		$this->checkDependencies();
		$this->base = $base;
		$this->test_hash = $test_hash;
		echo "test_hash = ".$this->test_hash."\n";
		$this->test_hash_hex = $this->base58Decode($this->test_hash);
		echo "after conversion: ".$this->test_hash_hex."\n";
		$this->b3 = new BLAKE3();	
		$this->blakehash = $this->b3->hash($base,'64');	

		if ($this->test_hash_hex != $this->blakehash) {
			echo "hashes don't match!"."\nFound hash: ".$this->blakehash."\nTest hash: ".$this->test_hash_hex;
		}
		
		else {
			echo "hashes match :)";
		}
	}
	
	/**
    * Check for the required dependencies.
    */
    public function checkDependencies()
    {
        if (!extension_loaded("gmp")) {
            die("The GMP PHP extension is missing.");
        }

        if (!extension_loaded("openssl")) {
            die("The OpenSSL PHP extension is missing.");
        }

        if (floatval(phpversion()) < 7.2) {
            die("The minimum PHP version required is 7.2.");
        }
    }
	
    /**
     * @param array $source
     * @param mixed $source_base
     * @param mixed $target_base
     * @return array
     *
     * @author Mika Tuupola
     * @link   https://github.com/tuupola/base58
     */
    public function baseConvert(array $source, $source_base, $target_base)
    {
        $result = [];
        while ($count = count($source)) {
            $quotient = [];
            $remainder = 0;
            for ($i = 0; $i !== $count; $i++) {
                $accumulator = $source[$i] + $remainder * $source_base;
                $digit = (integer)($accumulator / $target_base);
                $remainder = $accumulator % $target_base;
                if (count($quotient) || $digit) {
                    array_push($quotient, $digit);
                };
            }
            array_unshift($result, $remainder);
            $source = $quotient;
        }
        return $result;
    }

    /**
     * @param mixed $data
     * @param bool  $integer
     * @return int|string
     *
     * @author Mika Tuupola
     * @link   https://github.com/tuupola/base58
     */
    public function base58Decode($data, $integer = false)
    {
		echo "in base58: ".$data."\n";
        $data = str_split($data);
        $data = array_map(function ($character) {
            $chars = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
            return strpos($chars, $character);
        }, $data);
        /* Return as integer when requested. */
        if ($integer) {
            $converted = $this->baseConvert($data, 58, 10);
            return (integer)implode("", $converted);
        }
        $converted = $this->baseConvert($data, 58, 128);
		//return implode("", array_map("chr", $converted));
		echo "$converted: ".implode("",$converted)."\n";
        return implode("", array_map(function ($ascii) {
            return chr($ascii);
        }, $converted)); 
    }
}